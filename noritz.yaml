esphome:
  name: wt32
  includes:
    - noritz.h

esp32:
  board: esp-wrover-kit
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: ""

ota:
  password: ""

# wifi:
#   ssid: !secret wifi_ssid
#   password: !secret wifi_password


#   Enable fallback hotspot (captive portal) in case wifi connection fails
#   ap:
#     ssid: "Wt32 Fallback Hotspot"
#     password: "UW3UIhnNQKE8"

# captive_portal:

ethernet:
  type: LAN8720
  mdc_pin: GPIO23
  mdio_pin: GPIO18
  clk_mode: GPIO0_IN
  phy_addr: 1
  power_pin: GPIO16

web_server:
  port: 80

uart:
  id: uart_bus
  rx_pin: GPIO4
  baud_rate: 2400
  # debug:
  #   direction: RX
  #   dummy_receiver: true
  #   sequence:
  #     - lambda: UARTDebug::log_string(direction, bytes);

switch:
  - platform: gpio
    pin: 33
    id: up
    inverted: True
    restore_mode: ALWAYS_OFF
    name: "temperature up button"
    on_turn_on:
    - delay: 500ms
    - switch.turn_off: up
  - platform: gpio
    pin: 5
    id: down
    inverted: True
    restore_mode: ALWAYS_OFF
    name: "temperature down button"
    on_turn_on:
    - delay: 500ms
    - switch.turn_off: down
  - platform: gpio
    pin: 17
    id: power
    inverted: True
    restore_mode: ALWAYS_OFF
    name: "power button"
    on_turn_on:
    - delay: 500ms
    - switch.turn_off: power

binary_sensor:
  - platform: template
    name: "noritz power"
    lambda: |-
      if (id(noritz_power).state) {
        return true;
      } else {
        return false;
      }

sensor:
  - platform: custom
    lambda: |-
      auto noritz = new Noritz(id(uart_bus));
      App.register_component(noritz);
      return {noritz->power, noritz->temperature};

    sensors:
      - name: "noritz powerstate"
        id: noritz_power
        internal: true
      - name: "noritz temperature"
        id: noritz_temperature

